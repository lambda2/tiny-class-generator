#!/usr/bin/env ruby

class String
  def s_capitalize
    return self.slice(0, 1).upcase + self.slice(1, self.length)
  end

  def s_classify
    return self.split("_").map { |e| e.s_capitalize }.join ""
  end
end

class CppGenerator


  def initialize(name, args)
    @name = name;
    @attributes = args.map do |e|
      a = e.split(":")
      a.length >= 2 ? {name: a.slice!(0, 1).first, type: a.join(":")} : {name: a.first, type: "int"}
    end
  end

  def generate
    header_target = open("#{@name.s_capitalize}.hpp", 'w')
    header_target.write(self.generate_header)
    header_target.close
    body_target = open("#{@name.s_capitalize}.cpp", 'w')
    body_target.write(self.generate_body)
    body_target.close
  end

  def generate_header
    header = []
    header << "#ifndef #{@name.upcase}_H"
    header << "#define #{@name.upcase}_H\n"
    header << "#include <iostream>\n" if @attributes.map{|e| e[:type]}.join(" ").include? "std::"
    header << "class #{@name.s_capitalize}\n{\n"
    header << "public:"

    # constructors
    header << "\t#{@name.s_capitalize}();" # default
    header << "\t#{@name.s_capitalize}(#{@name.s_capitalize} const &src);" # copy
    header << "\tvirtual ~#{@name.s_capitalize}();\n"
    header << "\t#{@name.s_capitalize}& operator=(#{@name.s_capitalize} const &src);\n"

    # accessors
    @attributes.each do |e|
      header << "\tvoid set#{e[:name].s_classify}(#{e[:type]} value);"
      header << "\t#{e[:type]} get#{e[:name].s_classify}(void) const;"
    end

    header << "private:"
    # private members
    @attributes.each {|e| header << "\t#{e[:type]} #{e[:name]};"}
    header << "};\n\n#endif\n"
    return header.join "\n"
  end

  def generate_body
    body = []
    body << "#include \"#{@name.s_capitalize}.hpp\"\n"

    # constructors
    body << "#{@name.s_capitalize}::#{@name.s_capitalize}()\n{ }\n"

    init = @attributes.map {|e| "#{e[:name]}(src.#{e[:name]})"}.join ", "
    body << "#{@name.s_capitalize}::#{@name.s_capitalize}(#{@name.s_capitalize} const &src) : #{init}\n{ }\n"

    body << "#{@name.s_capitalize}::~#{@name.s_capitalize}()\n{\n\n}\n"

    copy = @attributes.map {|e| "\tthis->#{e[:name]} = src.#{e[:name]};"}.join "\n"
    body << "#{@name.s_capitalize} &#{@name.s_capitalize}::operator=(#{@name.s_capitalize} const &src)\n{\n"
    body << "#{copy}\n\treturn (*this);\n}\n"

    # accessors
    @attributes.each do |e|
      body << "void #{@name.s_capitalize}::set#{e[:name].s_classify}(#{e[:type]} value)\n{\n\tthis->#{e[:name]} = value;\n}\n"
      body << "#{e[:type]} #{@name.s_capitalize}::get#{e[:name].s_classify}(void) const\n{\n\treturn (this->#{e[:name]});\n}\n"
    end
    return body.join "\n"
  end

end

args = ARGV
class_name = args.slice!(0, 1).first
class_generator = CppGenerator.new(class_name, args)
class_generator.generate